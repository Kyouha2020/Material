@use "sass:color"
@use "sass:list"
@use "sass:map"
@use "sass:math"
@use "constant-ratios" as *
@use "../layout/density" as *

// https://material.io/design/usability/accessibility.html
// https://material.io/design/color/text-legibility.html

// Color and contrast

$text--high-emphasis: 87%
$text--medium-emphasis: 60%
$text--disabled: 38%

$text--high-emphasis-helper-text: 87%
$text--helper-text: 60%
$text--error-text: 100%

$icon--active: 87%
$icon--inactive: 60%
$icon--disabled: 38%

$stroke: 12%


@function luminance($color)
  $red: list.nth($linear-channel-values, color.red($color) + 1)
  $green: list.nth($linear-channel-values, color.green($color) + 1)
  $blue: list.nth($linear-channel-values, color.blue($color) + 1)
  @return .2126 * $red + .7152 * $green + .0722 * $blue

@function contrast($back, $front)
  $backLum: luminance($back) + .05
  $foreLum: luminance($front) + .05
  @return math.max($backLum, $foreLum) / math.min($backLum, $foreLum)

@function tone($color)
  @if $color == "dark" or $color == "light"
    @return $color

  $minimumContrast: 3.1
  $lightContrast: contrast($color, white)
  $darkContrast: contrast($color, rgba(black, .87))

  @if ($lightContrast < $minimumContrast) and ($darkContrast > $lightContrast)
    @return "light"
  @else
    @return "dark"

@function contrast-tone($color)
  @return if(tone($color) == "dark", "light", "dark")


@mixin color($color, $type)
  color: rgba($color, $type)


// Layout and typography
// touch targets

@mixin touch-target($component, $touch-target: 48px)
  $height: map.get($component-height, $component)
  $touch-target: $touch-target

  @if $height <= $touch-target
    &::after
      content: ''
      position: absolute
      top: ($height - $touch-target) / 2
      right: 0
      bottom: 0
      left: 0
      width: 100%
      height: $touch-target
